Real-Life Analogy :
====================
Task-1 :
========
# Imagine trying to open your phone with the wrong PIN 3 times ‚Äî it locks you out and says:
# ‚ÄúTry again after 3 hours.‚Äù
# That‚Äôs exactly what this program does, just using a password instead of a PIN.

# Client requirement: User Login Attempts with 3-Hour Lockout using loops:
==========================================================================
 # This program simulates a login system where the user has a maximum of 3 attempts to enter the correct password. 
 # If the user fails all 3 attempts, they are locked out for 3 hours. The program stores the lockout time and restricts further login attempts during the lockout period.
# Steps we should follow here :
-------------------------------
 # Create a login system where:
 # The user is allowed a maximum of 3 attempts to log in.
 # If the password is incorrect 3 times, the user should wait 3 hours before trying again.
 # The program must display a message like:
 # "You have been locked out. Try again after 3 hours."
 # Track and store the lockout time using system time.

Code-1: [Login Attempt Tracker with 3-Hour Cooldown using loops]
================================================================
# Import Required Modules
import time
from datetime import datetime, timedelta
  # time is used to track the current timestamp and lockout expiration.
  # datetime and timedelta can be useful if you want human-readable time (though time.time() is used here).

# Set Up Password and Lockout File
correct_password = "admin123"
lockout_file = "lockout_time.txt"
# Uses a file to store the lockout expiration time, simulating persistent memory (like saving to a database or session in real-world systems).

# Check Lockout Status
def is_locked_out():
   # Tries to read the lockout timestamp from the file.
   # Converts the stored string to a float (UNIX time format).
    try:
        with open(lockout_file, "r") as f:
            lockout_timestamp = float(f.read().strip())
   # Compares the current time to the stored lockout time.
   # If it's still in the lockout window, calculates remaining time and shows it.
            if time.time() < lockout_timestamp:
                remaining = int(lockout_timestamp - time.time())
   # Converts seconds to a human-readable hours and minutes format.
   # Returns True to indicate the user is still locked out.
                mins, secs = divmod(remaining, 60)
                hrs, mins = divmod(mins, 60)
                print(f"You are locked out. Please try again after {hrs}h {mins}m.")
                return True
   # If there's no lockout file yet, it means the user is not locked out.
    except FileNotFoundError:
        pass
    return False

# Function to Lock the User for 3 Hours
def lock_user_for_3_hours():
    lockout_until = time.time() + 3 * 60 * 60  # 3 hours in seconds
   # Calculates the lockout expiry time, which is current time + 3 hours (in seconds).
   # Stores the lockout timestamp in a file for future reference.
    with open(lockout_file, "w") as f:
        f.write(str(lockout_until))
   # Shows a message to the user.
    print("You have been locked out. Try again after 3 hours.")

# Main Login Logic :
# ==================
# Check if user is currently locked out
if not is_locked_out():
  # If not locked out, gives the user 3 chances to enter the correct password.
    for attempt in range(3):
        user_input = input("Enter your password: ")
        if user_input == correct_password:
            print("Login successful!")
            break
  # If the password is correct, login is successful, and the loop exits.
  # If wrong, show how many attempts are left.
        else:
            remaining_attempts = 2 - attempt
            if remaining_attempts > 0:
                print(f"Incorrect password. You have {remaining_attempts} attempts left.")
# If it‚Äôs the third wrong attempt, trigger the lockout by calling the lock function.
            else:
                lock_user_for_3_hours()

Output :
========
  Successful login attempt :
  ==========================
   Enter your password:  admin
   Incorrect password. You have 2 attempts left. 
   Enter your password:  admin123
   Login successful!
  Failed login attempt :
  ======================
   Enter your password:  564
   Incorrect password. You have 2 attempts left.
   Enter your password:  14
   Incorrect password. You have 1 attempts left.
   Enter your password:  54
   You have been locked out. Try again after 3 hours.

Client requirement: [Login Attempt Program using if-elif-else, While loops, and Functions]
===========================================================================================
Requirment :
============
# Allow a user to enter a password.
# If correct ‚Üí ‚úÖ ‚ÄúLogin successful!‚Äù
# If incorrect ‚Üí ‚ùå Give the user up to 3 attempts.
# If the user fails all 3 attempts ‚Üí üîí Lock them out for 3 hours.
# If the user runs the script during the lockout time ‚Üí ‚è≥ Show how much time is left.

Code-2 :
========
import time
# Constants
CORRECT_PASSWORD = "admin123"
MAX_ATTEMPTS = 3
LOCKOUT_DURATION = 3 * 60 * 60  # 3 hours in seconds
LOCKOUT_FILE = "lockout_time.txt"

# Function to get lockout time from file
  # This tries to read the saved lockout time from a file.
  #If there's no file yet (you haven't been locked before), it returns nothing (None).
def get_lockout_time():
    try:
        with open(LOCKOUT_FILE, "r") as f:
            return float(f.read().strip())
    except FileNotFoundError:
        return None

# Function to check if user is currently locked out
  # If you‚Äôve been locked out before and 3 hours haven‚Äôt passed yet:
  # It will calculate how much time is left and print it.
  # Then it stops the program from going further.
def is_user_locked():
    lockout_time = get_lockout_time()
    if lockout_time:
        current_time = time.time()
        if current_time < lockout_time:
            remaining = int(lockout_time - current_time)
            hrs, rem = divmod(remaining, 3600)
            mins, _ = divmod(rem, 60)
            print(f"You are locked out. Try again after {hrs}h {mins}m.")
            return True
    return False

# Function to lock the user for 3 hours
  # This sets a timer for 3 hours from now.
  # It saves that time into the file so the next time you run the program, it knows you're still locked.
  # Then it prints a lockout message.
def lock_user():
    lockout_until = time.time() + LOCKOUT_DURATION
    with open(LOCKOUT_FILE, "w") as f:
        f.write(str(lockout_until))
    print("You have been locked out. Try again after 3 hours.")

# Function to handle login attempts [Login Attempt Logic]
  # First, it checks if you're locked out (using the is_user_locked() function).
  # If not locked, it lets you enter your password in a loop ‚Äî up to 3 times
def login():
    if is_user_locked():
        return  
    attempts = 0
    while attempts < MAX_ATTEMPTS:
        password = input("Enter your password: ")
  # If-Else for Password Check
    # If you get the password right ‚Üí you're in! üéâ
    # If wrong ‚Üí it tells you how many tries are left.
    # After 3 wrong tries ‚Üí you‚Äôre locked out and the time is saved.
        if password == CORRECT_PASSWORD:
            print("Login successful!")
            break
        elif password != CORRECT_PASSWORD:
            attempts += 1
            remaining = MAX_ATTEMPTS - attempts
            if remaining > 0:
                print(f"Incorrect password. You have {remaining} attempt(s) left.")
            else:
                print("Incorrect password. No attempts left.")
                lock_user()
        else:
            print("Invalid input.")

# Run the program
# This simply starts the login process.
login()

Task-2 : [Same Login System with for Loop along with if, elif, else and functions]
=====================================================================================
import time

CORRECT_PASSWORD = "admin123"
MAX_ATTEMPTS = 3
LOCKOUT_DURATION = 3 * 60 * 60  # 3 hours
LOCKOUT_FILE = "lockout_time.txt"

def get_lockout_time():
    try:
        with open(LOCKOUT_FILE, "r") as f:
            return float(f.read().strip())
    except FileNotFoundError:
        return None

def is_user_locked():
    lockout_time = get_lockout_time()
    if lockout_time:
        current_time = time.time()
        if current_time < lockout_time:
            remaining = int(lockout_time - current_time)
            hrs, rem = divmod(remaining, 3600)
            mins, _ = divmod(rem, 60)
            print(f"You are locked out. Try again after {hrs}h {mins}m.")
            return True
    return False

def lock_user():
    lockout_until = time.time() + LOCKOUT_DURATION
    with open(LOCKOUT_FILE, "w") as f:
        f.write(str(lockout_until))
    print("You have been locked out. Try again after 3 hours.")

def login():
    if is_user_locked():
        return
   # Start attempt at 1
   # Keep going up to (and including) 3
   # So the loop runs 3 times total
    for attempt in range(1, MAX_ATTEMPTS + 1):
        password = input("Enter your password: ")
        
        if password == CORRECT_PASSWORD:
            print("Login successful!")
            return
        
        elif attempt < MAX_ATTEMPTS:
            print(f"Incorrect password. You have {MAX_ATTEMPTS - attempt} attempt(s) left.")
        else:
            print("Incorrect password. No attempts left.")
            lock_user()

login()

Task-3 : [Same Login System with for Loop and while loops along with if, elif, else and functions using in same code]
========================================================================================================================
import time

CORRECT_PASSWORD = "admin123"
MAX_ATTEMPTS = 3
LOCKOUT_DURATION = 3 * 60 * 60  # 3 hours
LOCKOUT_FILE = "lockout_time.txt"

# --------------------- Functions -----------------------

def get_lockout_time():
    """Reads the lockout time from file if present."""
    try:
        with open(LOCKOUT_FILE, "r") as f:
            return float(f.read().strip())
    except FileNotFoundError:
        return None

def is_user_locked():
    """Checks if the user is currently locked out."""
    lockout_time = get_lockout_time()
    if lockout_time:
        current_time = time.time()
        if current_time < lockout_time:
            remaining = int(lockout_time - current_time)
            hrs, rem = divmod(remaining, 3600)
            mins, _ = divmod(rem, 60)
            print(f"\nüö´ You are locked out. Try again after {hrs}h {mins}m.\n")
            return True
    return False

def lock_user():
    """Locks the user by saving future lockout time to file."""
    lockout_until = time.time() + LOCKOUT_DURATION
    with open(LOCKOUT_FILE, "w") as f:
        f.write(str(lockout_until))
    print("\nüîí You have been locked out for 3 hours.\n")

def attempt_login():
    """Handles the login attempts using for loop."""
    for attempt in range(1, MAX_ATTEMPTS + 1):
        password = input("Enter your password: ")

        if password == CORRECT_PASSWORD:
            print("\n‚úÖ Login successful!\n")
            return True

        elif password != CORRECT_PASSWORD:
            remaining = MAX_ATTEMPTS - attempt
            if remaining > 0:
                print(f"‚ùå Incorrect password. You have {remaining} attempt(s) left.\n")
            else:
                print("‚ùå Incorrect password. No attempts left.\n")
    return False

# --------------------- Main Login Control -----------------------

def login():
    while True:
        if is_user_locked():
            break  # Don't proceed if locked

        success = attempt_login()

        if success:
            break  # Exit the loop if login successful
        else:
            lock_user()
            break  # Exit after locking the user

# --------------------- Run the Program -----------------------

login()

# Explanation :
===============
   Concept Used	               Where in Code        	                What it Does
‚úÖ Function :	             login(), attempt_login() etc.   	     Keeps code organized
üîÅ while loop	:                while True:	                      Keeps checking if login should proceed or not
üîÅ for loop	:              for attempt in range...	              Limits user to 3 tries
üìä if / elif / else :     	Inside attempt_login()	               Decides success, wrong password, or lockout
‚è±Ô∏è Lockout logic :        	lock_user() & is_user_locked()	       Prevents spamming login attempts


Task-4 :
=========
The provided code stub reads two integers from STDIN, a and b. Add code to print three lines where:
1.The first line contains the sum of the two numbers.
2.The second line contains the difference of the two numbers (first - second).
3.The third line contains the product of the two numbers.

Code :
======
# Read input values
a = int(input("Enter a value" ))
b = int(input("Enter b value" ))

# Print the results with descriptions
print("Sum of value is", a + b)
print("Difference of value is", a - b)
print("Product of value is", a * b)

Output :
========
Enter a value 6
Enter b value 3
Sum of value is 9
Difference of value is 3
Product of value is 18


