# Error Handling :
==================
As developer writting a code without an errors are very important, So today we will make some mistakes and will find, what errors we will getting.
 1) This below code is the correct code without any issues, It'll do addtion of num1 and num2.
     num1=eval(input("enter a number one: "))
     num2=eval(input("enter a number two: "))
     add=num1+num2  
     print(add) : output = num1(2)+num2(2) =4.

    Let's start the modifications here :
    ------------------------------------
    Error-1 : [Name-Error]
    ======================
      Instead of doing addition with num1+num2 I mistakenly do addtion with num3(which we not defined on the above code)        
        add=num1+num3 [Error: NameError: name 'number3' is not defined]
      Why we are getting this error :
      -------------------------------
        Because we didn't define the num3 variable. If you want fix this, please verify is that variable(num3) is defined on your code or not ?

    Error-2 : [Syntax-Error]
    ========================
     I intentionnaly remove the end bracket and will see what error we will get.
       num1=eval(input("enter a number one: ") & Run the code
       Error-Code : SyntaxError: '(' was never closed.
       Fix : Verify the syntax of your code, And add the correct synstax and run : num1=eval(input("enter a number one: "))

    Error-3 : [ZeroDivision-Error]
    ==============================
         number1=eval(input("enter a number one: "))
         number2=eval(input("enter a number two: "))
         add=number1/number2
         print(add) & run the code
       Inputs:
         enter a number one:  100
         enter a number two:  0
       
       Error :
       -------
          "ZeroDivisionError: division by zero"
       
       Why This error we will get :
       ----------------------------
          This ZeroDivisionError, which occurs when you try to divide a number by zero. 
          The traceback indicates that the error happened on the line where we perform the division
          Python tries to compute 100/0, but since division by zero is not defined, Python raises a ZeroDivisionError.
   
       Example-scenario-for-this-error: 
       --------------------------------
         a) Basic Concept of Division:
         -----------------------------
             Division is like splitting something into equal parts. For example, if you have 10 apples and want to share them equally among 2 friends, each friend gets 5 apples.
         b) Division by Zero:
         --------------------
             Now, imagine you want to divide 10 apples among 0 friends. Since there are no friends to share the apples with, it doesn’t make sense.You can’t divide something if there’s no one to receive it.
             In mathematical terms, dividing by zero doesn’t produce a meaningful or defined result. It’s like trying to answer “How many times does 0 fit into 10?” There’s no answer because dividing by zero breaks the rules of arithmetic.

    Error-4 : [ZeroDivision-Error]
    ==============================
      Code :  "Trying to do division with string with intiger", Run this code and see what error we will get.
      ------
          number1=(input("enter a number one: "))      #string
          number2=float(input("enter a number two: ")) #int
          add=number1/number2                          # Now you wanna do division with string with int
          print(add) & RUN.
      Provide the inputs :
     ---------------------
        enter a number one:  5
        enter a number two:  2
      Error-Massege :
      ---------------
        TypeError: unsupported operand type(s) for /: 'str' and 'int'
      Why it happens : 
      ----------------
        Because it doesn't support dividing a string (number1) by an integer (number2).
      Fix :
      ------
        To fix this, you should convert number1 to an integer or float before performing the division:
           number1 = float(input("enter a number one: "))  # convert to float

    Error-5 : [SyntaxError: incomplete input]
    ==========================================
      Code :  "Removed the closing bracket for print statement", Run this code and see what error we will get.
      ------
          number1=(input("enter a number one: "))      
          number2=float(input("enter a number two: "))
          add=number1/number2                       
          print(add
      Error : 
      -------
          print(add
             ^
          SyntaxError: incomplete input [The error occurs because the "print statement is missing a closing parenthesis"]
      Fix : 
      ------
          print(add)  # Added the closing parenthesis

    Error-5 : [SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?]
    =========================================================================================
      Code :  "Removed the brackets for add in print statement", Run this code and see what error we will get.
      ------
          number1=(input("enter a number one: "))      
          number2=float(input("enter a number two: "))
          add=number1/number2                       
          print add
       Error :
       -------
          SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
        Fix :
        -----
           The correct syntax for Python 3 is print(add) with parentheses

# Exception Handling : 
======================
   Note : Here indentation should be higher priority. [ Indentation : Space ] [ You can see the below code examples, There we gave the spaces at try and except blocks].
    There are Two blocks : We can use two blocks to handles the Error and Exceptions in python code.
    ----------------------
       1) try    : Our code will be there in a "try" block. [The code inside this block is the code that you want to attempt to run.]
       2) except : The code inside this block runs if an error occurs in the try block. It’s where you handle the error, allowing your program to continue running or to handle the problem gracefully.
    How it works :
    --------------
      When Python encounters an error in the try block, it immediately stops executing that block and moves to the except block. If no error occurs, the except block is skipped.
    Take a scenario :
    ------------------
       Suppose we have written 500 lines of code, But we are getting error at 200 line, But This error is might not that much impact our code, but we still want to continue executing the remaining code.
     How :
     -----
       We can use a "try" block around the code that might fail and an "except" block to handle the error.

   Examples-code-1 : 
   =================
      try:
         number = int(input("Enter a number: "))
         print(f"You entered: {number}")
      except ValueError:
        print("That's not a valid number!")

     Explanation: 
     ------------
       The try block attempts to convert user input to an integer and print it. [ If i provide the input as 2 it'll give the correct answer, But
       If you provide input like 2.5(float values) a ValueError occurs, and the except block prints an error message ]

   Example-code-2 : [# Handling Multiple Exceptions:]
   ================
      try:
         numerator = int(input("Enter the numerator: "))
         denominator = int(input("Enter the denominator: "))
         result = numerator / denominator
         print(f"Result: {result}")
      except ValueError:
         print("Invalid input! Please enter integers only.")
      except ZeroDivisionError:
         print("Error! You cannot divide by zero.")

     Explanation :
     -------------
       This example handles two types of errors: ValueError if the input is not an integer, and ZeroDivisionError if the denominator is zero.
       The appropriate error message is printed based on the type of exception raised.
        If you provide the input as ex: like 2 and 2    > It'll give right output
        If you provide the input as ex: like 2 and 5.2  > Will get Invalid input! Please enter integers only, Which we mentioned on print statement
        If you provide the input as ex: like 100 and 0  > Will get Error! You cannot divide by zero which we mentioned on print statement

   *Example-code-3* :
   ==================
       If you want to know what kind of error we are getting on the code automatically, instead of manually adding Print statement in except block we can use the "Exception e".
       It'll automatically display the What is the error and From where the error is comming.
       Code :
       ------
        try:
           num1 = float(input("enter number-1:"))
           num2 = float(input("enter number-2:"))
           num3 = float(input("enter number-3:"))
           average = (num1 + num2 + num3) / 3
           print("The average of {}, {} and {} is {}".format(num1, num2, num3, average))
        except Exception as e:  
           print(e)

       User-Input and Output :
       -----------------------
        a) When an user provide the expected input. 
           enter number-1: 2
           enter number-2: 2
           enter number-3: 3
           The average of 2.0, 2.0 and 3.0 is 2.3333333333333335  [ Code exceuted successfully ]
       
        b) When an user provide the incorrcet input on the code
           Ex : On code he make the changes like instad of /3 he added the 0 on this code line [average = (num1 + num2 + num3) / 0] OR [average = (num1 + num2 + num333) / 3]
           enter number-1: 5
           enter number-2: 4
           enter number-3: 7
           float division by zero [Will get an error]
     Note : So If there is an error in the code, it will be caught and printed. Ex: The error NameError: name 'num3333' is not defined will be printed due to the typo mentioned above.


   



      


      
