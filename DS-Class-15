Functions :
===========
  Functions means "Reuse any part of code".
Rules of a functions :
======================
  def <function-name> : Functions start with def and we need to provide function name.
  def <function-name> (): Function means () and : is necessary [Whenever column is come what is the next, intendation will come].

 Note-1 : if we not mention any vakues inside these function brackets (), That method we call it as "without arguments" or "without parameters".
 Note-2 : If you provide values inside the function brackets (), it is called a method "with arguments" or "with parameters".
Example :
=========
   def <function-name>():
       # Write your code here
   function_name() # call the fucntion it'll execute the code 
  
1) - Dive into code for functions without arguments/Parameters :
================================================================
Code-1 without functions :
--------------------------
Write a basic code for doing addition
   n1=10
   n2=20
   add=n1+n2
   print("the addition of {} and {} is {}".format(n1,n2,add))

Code-1 with functions :
-----------------------
Now we will implement the "functions on this addition code"
   def addition ():
       n1=10
       n2=20
       add=n1+n2
       print("the addition of {} and {} is {}".format(n1,n2,add)) # If you execute this function it'll not give any output, The output will not display until unless we call a function.
   addition() # Now execute the code, It'll call that addition function and execute the code inside that addition function and give the output.

Code-2 with functions :
-----------------------
 def hello_world():
     print("Hello good morning")
hello_world()  # It'll call the function, Then it will execute the code inside the function.

Note : We doesn't know whether the function is correctly defined or wrongly defined until unless we call the function.

Let's deep dive into functions with scenarios :
=================================================
  Requirement -1 : [First write a normal code then will implement the functions on the same code]
  ----------------
    # Take three numbers and find the average
    # Wap to ask the user to enter 3 numbers
    # num1=eval(input())
    # num2=eval(input())
    # num3=eval(input())
    # avg=(num1+num2+num3)/3
  Code -1 : [without functions]
  --------
    # Ask the user to enter three numbers
    num1 = eval(input("Enter the first number: "))
    num2 = eval(input("Enter the second number: "))
    num3 = eval(input("Enter the third number: "))
    # Calculate the average
    avg = (num1 + num2 + num3) / 3
    # Print the average
    print("The average of the three numbers is:", avg)
    # Otherway to print the print statement
    # print ( "The avg of {}, {} and {} is {}". format(num1,num2,num3,avg))

  # Implement this same code using functions :
  --------------------------------------------
    def avg():
        num1 = eval(input("Enter the first number: "))     # Ask the user to enter the number
        num2 = eval(input("Enter the second number: "))    # Ask the user to enter the number
        num3 = eval(input("Enter the third number: "))     # Ask the user to enter the number
        avg = (num1 + num2 + num3) / 3  # Calculate the average
        print ( "The avg of {}, {} and {} is {}". format(num1,num2,num3,avg))
    avg()     # Now Run the code

   # Now Implement this same code using functions with "try" and "exception" blocks :
   ----------------------------------------------------------------------------------
   def avg():        
       try:
          num1 = eval(input("Enter the first number: "))
          num2 = eval(input("Enter the second number: "))
          num3 = eval(input("Enter the third number: "))
          avg = (num1 + num2 + num3) / 3  # Calculate the average
          print ( "The avg of {}, {} and {} is {}". format(num1,num2,num3,avg))
       except Exception as e:
          print (e)
   avg()  # Now Run the code

  Requirement -2 : [First write a normal code then will implement the functions on the same code]
  ----------------
     # Wap ask the user to enter bill amount
     # Ask the user to enter the tip amount 
     # Calculate the total bill
  Code-1:
  =======
    def bill():
        try:
           Bill_Amount = eval(input("Enter bill amount: "))
           Tip_Amount = eval(input("Enter tip amount: "))
           Total_Bill = Bill_Amount+Tip_Amount
           print("Total bill is {} ".format(Total_Bill))
        except Exception as e:
           print(e)
    bill() # Run the code

  Code-2 :
  ========
    def convert_to_inr(amount_usd, conversion_rate=83.00): # Function to convert USD to INR
        return amount_usd * conversion_rate
    def calculate_total_bill(bill_usd, tip_usd): # Function to calculate the total bill
        return bill_usd + tip_usd
    def main():     # Main function to run the program
        try:
            bill_usd = float(input("Enter the bill amount in USD: "))   # Ask the user to enter the bill amount in USD
            tip_usd = float(input("Enter the tip amount in USD: "))     # Ask the user to enter the tip amount in USD
            total_usd = calculate_total_bill(bill_usd, tip_usd)         # Calculate the total bill in USD
            total_inr = convert_to_inr(total_usd)                       # Convert the total bill to INR
            print(f"The total bill amount in INR is: â‚¹{total_inr:.2f}") # Print the total amount in INR
        except ValueError:
            print("Invalid input. Please enter numeric values for the bill and tip amounts.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    # Run the main function
    if __name__ == "__main__":
    main()

# Requirement -3:
=================
# WAP ask the user to get a random num between 1 to 100
# Print it's an even or odd num
# Implement using function
Code -1 :
=========
   import random     # Packages always at the top
   def even_odd1(): 
       print('we are implementing even odd function')
       print("take one number") 
       num=random.randint(1,100)
       if num%2==0:
          print("the remainder is zero")
          print("{} is an even number".format(num))
       else:
          print("the remainder is not equal to zero") 
          print("{) is an odd number".format(num))
   even_odd1()  # Run the code.

Code -2 : [With try and exception blocks]
=========
   import random       # Packages always at the top
   def even_odd1(): 
       try:
          print('we are implementing even odd function')
          print("take one number") 
          num=random.randint(1,100)
          if num%2==0:
             print("the remainder is zero")
             print("{} is an even number".format(num))
          else:
             print("the remainder is not equal to zero") 
             print("{) is an odd number".format(num))
       except Exception as e:
          print(e)
   even_odd1() # Run the code

 Code -3 :
 =========
   import random              # Packages always at the top
   def get_random_number():   # Function to get a random number between 1 and 100
       return random.randint(1, 100)
   def check_even_or_odd(number):  # Function to determine if a number is even or odd
       if number % 2 == 0:
          return "even"
       else:
          return "odd"
   # Main function to run the program
   def main():
       number = get_random_number()        # Get a random number
       result = check_even_or_odd(number)  # Determine if it's even or odd
       print(f"The random number {number} is {result}.")      # Print the result
   # Run the main function
   # if __name__ == "__main__":
   main()


Python is working as a step by step process :
=============================================
Here is the example :
=====================
print ("Addition starts")
  def addition():
    n1=20
    n2=50
    print("add:" ,n1+n2)
    print("addition is done")

print ("multplication starts")
def multiplication():
    n1=20
    n2=50
    print("mul:" ,n1*n2)
    print("Multipliction is done")

print ("Substraction starts")
def Substraction():
    n1=20
    n2=50
    print("sub:" ,n1-n2)
    print("substraction is done")

print("Anything Remains")
print("no")
print("Then call the functions")

addition()
multiplication()
Substraction()

Out-put :
==========
Addition starts 
multplication starts 
Substraction starts
Anything Remains
no
Then call the functions
add: 70
addition is done
mul: 1000
Multipliction is done
sub: -30
substraction is done

2) Fucntions with arguments/Parameters :
========================================
Previously what we are doing, We define a function and then we added the variables manually on inside the fucntion right.
Let's take previous fucntion as example.
Here we provided the variables n1=10 and n2=20 manually then we do the addition by calling the addition fucntion.
 Function without argument :
 ===========================
   def addition ():
      n1=10
      n2=20
      add=n1+n2
      print("the addition of {} and {} is {}".format(n1,n2,add))
   addition()
> Here inside the function we 3 variables n1=10, n2=20, add=n1+n2.
> But how many user provided variables are there 2(n1=10, n2=20) But the "add" variable is calculated as the sum of n1 and n2. This variable is not provided by the user; it is derived from the provided inputs.
> On this above code we defined a function addition() without arguments, where the variables "n1, n2, and add" were all defined inside the function. 
> The user-provided variables "n1 and n2 were hardcoded within the function", "meaning the function always worked with these specific values".

# Let's modify the code to use a function with arguments. 
=========================================================
This allows the user to provide the values for n1 and n2 when calling the function, making it more flexible and reusable:
 Function with arguments :
 ========================= 
 Code-1 :
 =========
   def addition(n1, n2): # In the updated function addition(n1, n2), n1 and n2 are parameters, which are placeholders for the values that will be provided by the user when calling the function.
      add = n1 + n2      # The add variable is calculated as the sum of n1 and n2. This variable is not provided by the user; it is derived from the provided inputs.
      print("The addition of {} and {} is {}".format(n1, n2, add))  # The function prints the result of the addition using the provided values.
   # Calling the function with arguments
   addition(10, 20)   # When we call addition(10, 20), the values 10 and 20 are passed to the parameters n1 and n2, respectively. These are the user-provided variables.

Difference between Function without argument and Function with arguments :
==========================================================================
   In the original function without arguments, n1 and n2 were defined inside the function, making the function less flexible.
   In the function with arguments, n1 and n2 are provided by the user when calling the function, allowing for different inputs each time the function is used.

 Errors:
 ========
  Error-1 : TypeError: addition() missing 1 required positional argument: 'n2'
  ---------
   def addition (n1,n2):
     add=n1+n2
     print("the addition of {} and {} is {}".format(n1,n2,add))
   addition(40) # If you pass/provide single argument then you will get this error

   Error-2 : TypeError: addition() takes 0 positional arguments but 2 were given
   ----------
   def addition ():  # Arguments are not defined
     add=n1+n2
     print("the addition of {} and {} is {}".format(n1,n2,add))
   addition(40,20)   # If you provide the parameters without define the arguments on these brackets(), we will get this error.
     
   
       


