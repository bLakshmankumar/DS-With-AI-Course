What is mean by Variables :
===========================
  Variables in Python store key-value pairs where the variable name is the key and the assigned value is the value. 
  Variable names must start with a letter or an underscore, followed by letters, numbers, or underscores. 
  They are case-sensitive and can't use reserved keywords.
Rules to define variables :
===========================
  valid_name = "Alice"  # Valid
  _name2 = 42           # Valid
  Valid_Number=200      # Valid
  sum=700               # Valid [Note: sum is works for math operations, But never use "sum" as a variable even it's working]
  Valid_name%=200       # Invalid
  Valid name=300        # Invalid [we shouldn't use space in between]
  if=500                # Invalid (It won't allow the keywords to set as variables){like: is,if,and...etc}.
  2cool4school = "No"   # Invalid (starts with a number)
  class = "Physics"     # Invalid (reserved keyword)

Data-types :
============
  In computer programming, data types specify the type of data that can be stored inside a variable.
   Data Types	          Classes/Represent	          Description
    Numeric	           int, float, complex	   holds numeric values
    String	                str	               holds sequence of characters
   Sequence	           list, tuple, range   	 holds collection of items
   Mapping	               dict	               holds data in key-value pair form
   Boolean	               bool	               holds either True or False
     Set	            set, frozenset        	 hold collection of unique items

Examples :
==========
 1) Numeric (int, float, complex): Holds numeric values :
       age = 30                  # int
       temperature = 19.99       # float
       complex_num = 3 + 4j      # complex

 2) String (str): Holds sequence of characters :
       name = "Alice"            # str (Here we using "" and '')
       docstring                 #  But in this doc string we will use """ """(Triple quotes).
    Explanation :
    =============
        In Python, double quotes (" ") and triple quotes (""" """) are both used to define string literals, but they serve different purposes and have different use cases.
           Double Quotes (" "):
           --------------------
              Used for single-line strings.
              Cannot span multiple lines.
           Example :
           ---------
              single_line_string = "This is a single-line string."
              print(single_line_string)

           Triple Quotes/doc-string (""" """ or ''' ''') :
           -----------------------------------------------
              Used for multi-line strings.
              Ideal for docstrings and strings that span multiple lines.
              Can contain both single and double quotes without escaping 
            Example :
            ----------
               multi_line_string = """This is a multi-line string.
               It can span multiple lines.
               It's great for long texts."""
               print(multi_line_string)

 3) Sequence (list, tuple, range): Holds collection of items :
       fruits = ["apple", "banana", "cherry"]  # list
       point = (10, 20)                        # tuple
       numbers = range(1, 10)                  # range

 4) Mapping (dict): Holds data in key-value pair form :
       student = {"name": "Alice", "age": 21}  # dict

 5) Boolean (bool): Holds either True or False :
       is_active = True         # bool
    NOTE : When it'll provide a false, bool(0) only it'll give output as zero.
           Other than bool(0), Everything is True.[like bool(1) - it's true, bool(-1) - it's also true].

 6) Set (set, frozenset): Holds collection of unique items :
       unique_numbers = {1, 2, 3, 4, 5}  # set
       frozen_numbers = frozenset([1, 2, 3, 4, 5])  # frozenset

How to check the Python data type :
==================================
   There’s a built-in function called type which you can use to check data types in Python. Let’s look at some examples of type at work:
     >>> type(3)
       <class 'int'>
     >>> type('hello')
       <class 'str'>
     >>> type([1,2,3])
       <class 'list'>

Devided python into 3 parts :
=============================
 Level-1 :
 =========
   1) Basic syntax
   2) Variables
   3) Python packages information
   4) Basic python code
   5) Conditional statements
   6) Functions
   7) Looping

 Level-2 :
 =========
   1) Strings
   2) List
   3) Dictionary
   4) tuples
   5) Sets
   6) File handling sessions.

================="2-weeks-gap-for-statistics"======================

 Level-3 :
 ========= 
   1) oops concept
   2) Process/How to create your own Package
   3) FLASK APPS

#1)  Numeric(int, float, complex) :
===================================
   a) Integer (int) :
   ------------------
      Purpose: Represents whole numbers
      Example-code :
      --------------
         age = 30
         print(age)  # Output: 30
      Use Case: Use integers for counting, indexing, and any calculations that require whole numbers.
    
   b) Float (float) :
   ------------------
      Purpose: Represents decimal (floating-point) numbers.
      Example-code-1:
      ---------------
         temperature = 36.6
         print(temperature)  # Output: 36.6
      Example-code-2:
      ---------------
         pi(π) = 3.14159
         radius = 5.0
         area = pi * (radius ** 2)
         print(area)  # Output: 78.53975  
      Step-by-step breakdown of the calculation :
      ===========================================
       Given Values: 
       -------------
          π=3.14159
          radius=5.0
       Calculate the radius squared:
       -----------------------------
          radius2(square)= 5.0(square)=25.0(5*5)
       Multiply 𝜋 by the radius squared:
       ---------------------------------
          Area=3.14159×25.0=78.53975.
     
      Use Case: Use floats for measurements, calculations involving fractions, and any situation where precision is needed.

   c) Complex (complex) :
   ----------------------
      Purpose: Represents complex numbers with real and imaginary parts.
      Example-code-1:
      ---------------
           number=3+5j
           number (shift+enter) > it will give 3+5j as an output/answer. 
      Example-code-2:
      ---------------
          # If i want to retrive only real value seperately
                  number=3+5j (# Here3 is the real value and # 5 is the imaginery value)
                  dir(number) [It'll list the available methods(like conjugate, real, image methods)]
                  number.real[method-name] > Shift+Enter > we will get the  real value of this 3+5j = 3.0.
            
          # If i want to retrive only imagenary value seperately
                  number.imag [method-name] > Shift+Enter > we will get the imagenary value of this 3+5j = 5.0.
          # If i want to retrive only conjugate value seperately
              # conugate, It means + become - and - become +.
                  number.conjugate [if you only run this querry will get an suggestion > <function complex.conjugate()> >> if you see output is function we should provide the (). Then only we will get an output.
                  number.conjugate() [method-name] > Shift+Enter > we will get the conjugate value of this 3+5j = (3-5j)
      Example-code-3:
      ---------------
            complex(4,10) : What is the real and imaginary num here
                            # real=4
                            # image=10
                            # Output is : (4+10j)

            complex(4,-10) :  What is the real and imaginary num here
                            # real=4
                            # image= -10
                            # Output is : (4-10j)
                    Note :  # Inside bracket what you are seeing those we can call parameters/arguments

             complex()  # If i did not provide anything inside, Then
                        # It'll use real value is "0" and Imaginary value is "0".
                        # Whenever if you see any brackets (), that is called function
                        # Another name of function is called method
                        # Inside brackets what we are seeing is called is parameters/arguments.
                     Note : If you want to know more help, Move your cursor to inside those brackets > use (Shift+tab). It'll provide the syntax and meaning.

      Example-code-4:
      ---------------
         z = 2 + 3j
         conjugate = z.conjugate()
         print(conjugate)  # Output: (2-3j)
      Use Case: Use complex numbers in scientific and engineering calculations, particularly in fields like electrical engineering such as like signal processing and etc.
 # Representing numbers in decimal, binary, octal, and hexadecimal formats in Python :
 =====================================================================================
  1) Decimal (Base 10): 
  ---------------------
       The standard numeric system used in daily life, which uses the digits 0-9.
       Ex : decimal_number = 42  # A regular integer in base 10[0,1,2,3,4,5,6,7,8,9=total 10 digits].
  2) Binary (Base 2):
  -------------------
       A numeric system that uses only the digits 0 and 1. It is commonly used in computing and digital electronics
       Representation is "0b" or "0B"
       Ex : binary_number = 0b101010  # The prefix '0b' indicates a binary number, 101010 in binary equals 42 in decimal
  3) Octa/Octal (Base 8): 
  -----------------------
       Octa means 8
       So the base is also 8 
       Here will use only 8 digits: 0,1,2,3,4,5,6,7 (0 to 7 means 8 digits)
       A numeric system that uses the digits 0-7. It is less common but sometimes used in computing 
       Representation is "0o" or "0O"
       Ex : octal_number = 0o52  # The prefix '0o' indicates an octal number, 52 in octal equals 42 in decimal
  4) Hexa/Hexadecimal (Base 16):
  ------------------------------
       Hexa means 16
       So base is also 16
       Here will use 16 digits: 0,1,2,3,4,5,6,7,8 (0 to 9 and A-F), A numeric system that uses the digits 0-9 and the letters A-F. 
       It is often used in programming and computer science to represent binary data in a more compact form.
       Representation is "0x" or "0X"
       Ex : hexadecimal_number = 0x2A  # The prefix '0x' indicates a hexadecimal number, 2A in hexadecimal equals 42 in decimal

Some-practical examples for binary :
====================================
   Binary is a number system that uses only two digits, 0 and 1. It is the base for digital computers and other electronic devices.
   Binary means 2
   Binary numbers are converted to decimal numbers (base-10) using a place value system. In a place value system, each digit in a number has a weight or value according to its position. 
   In the binary system, the rightmost digit has a weight of 1, the second digit to the left has a weight of 2, the third digit to the left has a weight of 4, and so on. 
   To convert a binary number to a decimal number, you multiply each digit by its place value and add the products together.

   For example, in the first line of the code, the binary number is 1111. Let's convert it to decimal:
   If you run this on jupitor-notebok : 0b1111(shift+enter)=15(you will get this answer).
   Let's see how it works in the background.
   2^3  2^2  2^1  2^0 (2^3=8,+ 2^2=4,+ 2^1=2,+ 2^0=1)=15,      NOTE: {2^3=2*2*2=8}
    1    1    1    1 
   1 * 2^3 (or 1 * 8) + 1 * 2^2 (or 1 * 4) + 1 * 2^1 (or 1 * 2) + 1 * 2^0 (or 1 * 1) = 8 + 4 + 2 + 1 = 15
NOTE :
======
  # 3 digits = 4+2+1      (0b111)
  # 4 digits = 8+4+2+1    (0b1111)
  # 5 digits = 16+8+4+2+1 (0b11111)

Another-Example :
=================
   4     2     1  : Decimal output
   ===============================
   0     0     0      0
   0     0     1      1
   0     1     0      2
   0     1     1      3 [2+1]
   1     0     0      4 
   1     0     1      5 [4+1][2 has no value here so we added the 4+1]
   1     1     0      6 [4+2]
   1     1     1      7 [4+2+1]

  4= 4 times 0 will come and 4 times 1 will come
  2= 2 times 0 will come and 2 times 1 will come
  1= 1 time 0 will come and 1 time 1 will come.
Same process we will follow for other binaries as well.
We can try this value : 8 4 2 1 findthe decimal output.

Some-practical examples for Octa :
==================================
  For example, in the first line of the code, the binary number is 123. Let's convert it to decimal:
   If you run this on jupitor-notebok : 0o123(shift+enter)=83(you will get this answer).
   Let's see how it works in the background.
     8^2  8^1 8^0  (8^2=64, 8^1=8, 8^0=1) > [64*1=64, + 8*2=16, + 1*3=3] = 83.
      1    2   3

Some-practical examples for Hexa :
==================================
   Example with digits : 
   =====================
     For example, in the first line of the code, the binary number is 456. Let's convert it to decimal:
     If you run this on jupitor-notebok : 0x456(shift+enter)=1110(you will get this answer).
     16^2  16^1  16^0 (16^2=256, 16^1=16, 16^0=1) > [256*4=1024, + 16*5=80, + 1*6=6] = 1110.
       4     5     6

  Example with abc : [ Here abcdef values are 10-15(a=10,b=11,c=12,d=13,e=14]
  =================
     Example, In the first line of the code, the binary number is "CDE". Let's convert it to decimal: 
     If you run this on jupitor-notebok : 0xcde(shift+enter)=3294(you will get this answer).
     In hexadecimal, each digit holds a value from 0 to 9 and then A to F, corresponding to decimal values 10 to 15, respectively.
     Will assume C value is 12, D value is 13, E value is 14.
      16^2   16^1  16^0 (16^2=256, 16^1=16, 16^0=1) > {256*c(12)=3072, + 16*d(13)=208, + 1*e(14)=14} = "3294".
        c      d     e

==========================================================================================================================================================================================================================
 Additional Representations :
 =============================
   # purpose of "e" Representation : [In machine learnig anawers will be in the "e" representation]
   ==================================
       10e3/10e+3 : [10e3 and 10e+3 both are same]
       ============
          10: This is the significand (or mantissa) and represents the actual number.
           e: This stands for "exponent" and indicates the power to which 10 needs to be raised.
           3: This is the exponent value and signifies that 10 needs to be raised to the power of 3.
       Therefore, 10e3 is equivalent to 10 * 10^3 (10 x 10 x 10 = 1000 x 10 = which equals 10,000).
        
       1e5/1e+5 : 1*100000(1 after five 0's) : 10,000
       ==========
       10e-3 : (10/1000(we added three 0's ater 10, as it mentions "e3")= 0 & 0 cancelled so we get 1/100 > Now 1/100=0.01 this is the answer.
       =======
          means 10×10−3(power of -3) 
          This is equivalent to 10×0.001, which equals 0.01
              scientific_notation = 10e-3  # 10 multiplied by 10 raised to the power of -3
              print(scientific_notation)   # Output: 0.01

2) String :
=============
   We had discussed on above, look into string line.

3) Sequence (list, tuple, range): Holds collection of items) :
==============================================================
    a) List :
    ----------
       A list is a collection of items that are ordered and changeable. You can add, remove, or modify items in a list.
       Holds a collection of items that can be of different types and is mutable (can be changed).
       Example-code:
       ------------- 
             fruits = ["apple", "banana", "cherry"]
             fruits.append("orange")  # Adds an item to the list
             print(fruits)  # Output: ['apple', 'banana', 'cherry', 'orange']

          Meaning: A list named fruits containing 4 items: "apple", "banana", "cherry" and "orange".
          Purpose: Lists are used to store multiple items in a single variable.
          Real-time Use: You might use a list to keep track of items in a shopping cart on an e-commerce site.
    b) Tuple :
    -----------
        A tuple is similar to a list but is immutable, meaning you cannot change its contents after creation.
        Example-code:
        -------------
            coordinates = (10, 20)
            # coordinates[0] = 15  # This will raise an error because tuples are immutable
            print(coordinates)  # Output: (10, 20)

           Meaning: A tuple named point with two items: 10 and 20.
           Purpose: Tuples are used to store a collection of items that should not change.
           Use Case: Tuples are useful for fixed collections of items, like coordinates, where the values should not change.
           Real-time Use: You might use a tuple to store coordinates of a point on a map because the location should not change.
    c) Range :
    ----------
        A range is used to generate a sequence of numbers or Represents a sequence of numbers, often used in loops.
        Example:
        --------
            for i in range(5):
            print(i)  # Output: 0 1 2 3 4

          Meaning: A range object that generates numbers from 1 to 9 (10 is not included).
          Purpose: Ranges are commonly used in loops to repeat an action a specific number of times.
          Use Case: Ranges are useful for generating a sequence of numbers, especially in loops.
          Real-time Use: You might use a range to iterate through the first 10 products in a list to display them on a webpage.

4) Mapping (dict) :
===================
    Purpose: Holds data in key-value pairs, where each key is unique.
    Example-code:
    -------------
        student = {"name": "John", "age": 25, "course": "Computer Science"}
        print(student["name"])  # Output: John
        student["age"] = 26  # Modifies the value for the key "age"
        print(student)  # Output: {'name': 'John', 'age': 26, 'course': 'Computer Science'}

    Use Case: Dictionaries are useful for looking up items by a unique key, like a student record.

5) Boolean (bool) :
===================
    Purpose: Represents one of two values: True or False.
    Example-code:
    -------------
       is_student = True
       if is_student:
       print("This person is a student.")  # Output: This person is a student.

    Use Case: Booleans are used in conditional statements to control the flow of the program.

6) Set (set, frozenset)
========================
   a) set :
   --------
      Purpose: Holds a collection of unique items and is mutable.
      Example-code:
      -------------
         fruits = {"apple", "banana", "cherry", "apple"}
         print(fruits)  # Output: {'banana', 'apple', 'cherry'} (duplicates are removed)
         fruits.add("orange")  # Adds an item to the set
         print(fruits)  # Output: {'banana', 'apple', 'cherry', 'orange'}
     Use Case: Sets are useful for storing unique items and performing set operations like union and intersection.
   
   b) Frozenset :
   --------------
      Purpose: Holds a collection of unique items and is immutable.
      Example-code:
      -------------
         frozen_fruits = frozenset(["apple", "banana", "cherry"])
         # frozen_fruits.add("orange")  # This will raise an error because frozensets are immutable
         print(frozen_fruits)  # Output: frozenset({'banana', 'apple', 'cherry'})
      Use Case: Frozensets are useful when you need an immutable set of unique items.

Summary :
=========
   Lists are for ordered collections that can change.
   Tuples are for ordered collections that cannot change.
   Ranges generate sequences of numbers.
   Dictionaries store key-value pairs for quick lookups.
   Booleans control the flow with True/False conditions.
   Sets are for unique collections that can change.
   Frozensets are for unique collections that cannot change.
   Integers are for whole numbers.
   Floats are for real numbers with decimal points.
   Complex numbers are for numbers with real and imaginary parts.
   Strings are for sequences of characters.

