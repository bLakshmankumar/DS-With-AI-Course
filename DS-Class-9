What is mean by Variables :
===========================
  Variables in Python store key-value pairs where the variable name is the key and the assigned value is the value. 
  Variable names must start with a letter or an underscore, followed by letters, numbers, or underscores. 
  They are case-sensitive and can't use reserved keywords.
Rules to define variables :
===========================
  valid_name = "Alice"  # Valid
  _name2 = 42           # Valid
  Valid_Number=200      # Valid
  sum=700               # Valid [Note: sum is works for math operations, But never use "sum" as a variable even it's working]
  Valid_name%=200       # Invalid
  Valid name=300        # Invalid [we shouldn't use space in between]
  if=500                # Invalid (It won't allow the keywords to set as variables){like: is,if,and...etc}.
  2cool4school = "No"   # Invalid (starts with a number)
  class = "Physics"     # Invalid (reserved keyword)

Data-types :
============
  In computer programming, data types specify the type of data that can be stored inside a variable.
   Data Types	          Classes/Represent	          Description
    Numeric	           int, float, complex	   holds numeric values
    String	                str	               holds sequence of characters
   Sequence	           list, tuple, range   	 holds collection of items
   Mapping	               dict	               holds data in key-value pair form
   Boolean	               bool	               holds either True or False
     Set	            set, frozenset        	 hold collection of unique items

Examples :
==========
 1) Numeric (int, float, complex): Holds numeric values :
       age = 30                  # int
       temperature = 19.99       # float
       complex_num = 3 + 4j      # complex
 2) String (str): Holds sequence of characters :
       name = "Alice"            # str
 3) Sequence (list, tuple, range): Holds collection of items :
       fruits = ["apple", "banana", "cherry"]  # list
       point = (10, 20)                        # tuple
       numbers = range(1, 10)                  # range
 4) Mapping (dict): Holds data in key-value pair form :
       student = {"name": "Alice", "age": 21}  # dict
 5) Boolean (bool): Holds either True or False :
       is_active = True         # bool
 6) Set (set, frozenset): Holds collection of unique items :
       unique_numbers = {1, 2, 3, 4, 5}  # set
       frozen_numbers = frozenset([1, 2, 3, 4, 5])  # frozenset

How to check the Python data type :
==================================
   There’s a built-in function called type which you can use to check data types in Python. Let’s look at some examples of type at work:
     >>> type(3)
       <class 'int'>
     >>> type('hello')
       <class 'str'>
     >>> type([1,2,3])
       <class 'list'>

Devided python into 3 parts :
=============================
 Level-1 :
 =========
   1) Basic syntax
   2) Variables
   3) Python packages information
   4) Basic python code
   5) Conditional statements
   6) Functions
   7) Looping

 Level-2 :
 =========
   1) Strings
   2) List
   3) Dictionary
   4) tuples
   5) Sets
   6) File handling sessions.

================="2-weeks-gap-for-statistics"======================

 Level-3 :
 ========= 
   1) oops concept
   2) Process/How to create your own Package
   3) FLASK APPS

# Representing numbers in decimal, binary, octal, and hexadecimal formats in Python :
=====================================================================================
  1) Decimal (Base 10): 
  ---------------------
       The standard numeric system used in daily life, which uses the digits 0-9.
       Ex : decimal_number = 42  # A regular integer in base 10[0,1,2,3,4,5,6,7,8,9=total 10 digits].
  2) Binary (Base 2):
  -------------------
       A numeric system that uses only the digits 0 and 1. It is commonly used in computing and digital electronics
       Representation is "0b" or "0B"
       Ex : binary_number = 0b101010  # The prefix '0b' indicates a binary number, 101010 in binary equals 42 in decimal
  3) Octal (Base 8): 
  ------------------
       Octa means 8
       So the base is also 8 
       Here will use only two digits: 0,1,2,3,4,5,6,7 (0 to 7 means 8 digits)
       A numeric system that uses the digits 0-7. It is less common but sometimes used in computing 
       Representation is "0o" or "0O"
       Ex : octal_number = 0o52  # The prefix '0o' indicates an octal number, 52 in octal equals 42 in decimal
  4) Hexadecimal (Base 16):
  -------------------------
       A numeric system that uses the digits 0-9 and the letters A-F. It is often used in programming and computer science to represent binary data in a more compact form.
       Ex : hexadecimal_number = 0x2A  # The prefix '0x' indicates a hexadecimal number, 2A in hexadecimal equals 42 in decimal

Some-practical examples for binary :
====================================
   Binary is a number system that uses only two digits, 0 and 1. It is the base for digital computers and other electronic devices.
   Binary means 2
   Binary numbers are converted to decimal numbers (base-10) using a place value system. In a place value system, each digit in a number has a weight or value according to its position. 
   In the binary system, the rightmost digit has a weight of 1, the second digit to the left has a weight of 2, the third digit to the left has a weight of 4, and so on. 
   To convert a binary number to a decimal number, you multiply each digit by its place value and add the products together.

   For example, in the first line of the code, the binary number is 1111. Let's convert it to decimal:
   If you run this on jupitor-notebok : 0b1111(shift+enter)=15(you will get this answer).
   Let's see how it works in the background.
   2^3  2^2  2^1  2^0 (2^3=8,+ 2^2=4,+ 2^1=2,+ 2^0=1)=15,      NOTE: {2^3=2*2*2=8}
    1    1    1    1 
   1 * 2^3 (or 1 * 8) + 1 * 2^2 (or 1 * 4) + 1 * 2^1 (or 1 * 2) + 1 * 2^0 (or 1 * 1) = 8 + 4 + 2 + 1 = 15
NOTE :
======
  # 3 digits = 4+2+1      (0b111)
  # 4 digits = 8+4+2+1    (0b1111)
  # 5 digits = 16+8+4+2+1 (0b11111)

Another-Example :
=================
   4     2     1  : Decimal output
   ===============================
   0     0     0      0
   0     0     1      1
   0     1     0      2
   0     1     1      3 [2+1]
   1     0     0      4 
   1     0     1      5 [4+1][2 has no value here so we added the 4+1]
   1     1     0      6 [4+2]
   1     1     1      7 [4+2+1]

  4= 4 times 0 will come and 4 times 1 will come
  2= 2 times 0 will come and 2 times 1 will come
  1= 1 time 0 will come and 1 time 1 will come.
Same process we will follow for other binaries as well.
We can try this value : 8 4 2 1 findthe decimal output.

Some-practical examples for Octa :
==================================
  For example, in the first line of the code, the binary number is 1111. Let's convert it to decimal:
   If you run this on jupitor-notebok : 0o123(shift+enter)=83(you will get this answer).
   Let's see how it works in the background.
     8^2  8^1 8^0  (8^2=64,+ 8^1=8,+ 8^0=1) > [64*1=64, + 8*2=16, + 1*3=3] = 83.
      1    2   3
   


